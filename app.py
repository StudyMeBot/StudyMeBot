from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, FollowEvent
import os
from dotenv import load_dotenv
import re
from spreadsheet_utils import update_notification_time, record_study_log

label_mapping = {
    "Êúù": "morning",
    "Êòº": "noon",
    "Â§ïÊñπ": "evening",
    "Â§ú": "night"
}

def convert_to_24h(time_str, time_period):
    h, m = map(int, time_str.split(':'))
    if time_period == "Êúù":
        if h == 12:
            h = 0
    elif time_period in ["Êòº", "Â§ïÊñπ", "Â§ú"]:
        if h < 12:
            h += 12
    return f"{h:02}:{m:02}"

def parse_message(text):
    pattern = r"(Êúù|Êòº|Â§ïÊñπ|Â§ú)„ÅÆÈÄöÁü•„Çí(?:(\d{1,2})(?:[:Ôºö](\d{2}))?ÊôÇ?(?:\d{1,2}ÂàÜ)?„Å´„Åó„Å¶|„ÇÑ„ÇÅ„Å¶)"
    match = re.search(pattern, text)
    if match:
        time_period = match.group(1)
        hour = match.group(2)
        minute = match.group(3) if match.group(3) else "00"
        converted_time = convert_to_24h(f"{hour}:{minute}", time_period)
        return True, time_period, converted_time  # ‚úÖ ÈÄöÁü•Â§âÊõ¥„Å®Á¢∫ÂÆö
    return False, None, None  # ‚úÖ ÈÄöÁü•Â§âÊõ¥„Åß„ÅØ„Å™„ÅÑ

def is_notification_message(text):
    """
    ÈÄöÁü•Â§âÊõ¥„É°„ÉÉ„Çª„Éº„Ç∏„Å®„Åø„Å™„ÅôÊù°‰ª∂Ôºö
    - Êúù„ÉªÊòº„ÉªÂ§ï„ÉªÂ§ú„ÅÆÊôÇÈñìÂ∏Ø„Ç≠„Éº„ÉØ„Éº„Éâ
    - ÈÄöÁü•„Ç¢„ÇØ„Ç∑„Éß„É≥Á≥ª„Ç≠„Éº„ÉØ„Éº„ÉâÔºàÈÄöÁü•„ÉªË®≠ÂÆö„Éª„É™„Éû„Ç§„É≥„Éâ„Å™„Å©Ôºâ
    - Êï∞Â≠óÔºàÊôÇÂàªÔºâ„Éë„Çø„Éº„É≥
    """
    time_keywords = ["Êúù", "Êòº", "Â§ï", "Â§ú"]
    action_keywords = ["ÈÄöÁü•", "„É™„Éû„Ç§„É≥„Éâ", "Áü•„Çâ„Åõ", "Ë®≠ÂÆö", "Â§âÊõ¥", "Â§â„Åà„Å¶", "„Åó„Å¶", "„ÅäÈ°ò„ÅÑ", "ÈÄÅ„Å£„Å¶"]

    has_time_word = any(tk in text for tk in time_keywords)
    has_action_word = any(ak in text for ak in action_keywords)
    has_time_format = bool(re.search(r'\d{1,2}(:\d{2})?', text))

    return has_time_word and has_action_word and has_time_format


def is_study_log_message(text):
    """
    Â≠¶ÁøíË®òÈå≤„É°„ÉÉ„Çª„Éº„Ç∏„Å®„Åø„Å™„ÅôÊù°‰ª∂Ôºö
    - „Äå30ÂàÜ„Äç„ÇÑ„Äå1ÊôÇÈñì„Äç„Å™„Å©ÊôÇÈñì„ÅÆÊÉÖÂ†±„ÇíÂê´„ÇÄ
    - ÊñáÈ†≠„Å´ÁßëÁõÆ„Çâ„Åó„ÅçË™û„Åå„ÅÇ„Çã or #„Çø„Ç∞„ÇíÂê´„ÇÄ
    """
    has_time = bool(re.search(r'(\d+)\s*ÂàÜ|(\d+)\s*ÊôÇÈñì', text))
    has_subject = bool(re.search(r'^([\w„ÅÅ-„Çì„Ç°-„É≥‰∏Ä-Èæ•]+)', text)) or ('#' in text)
    return has_time and has_subject

# .env„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
load_dotenv()

app = Flask(__name__)

# LINE Messaging API„ÅÆË™çË®ºÊÉÖÂ†±
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

# üëá „Éï„Ç©„É≠„Éº„Ç§„Éô„É≥„ÉàÔºàÂèã„Å†„Å°ËøΩÂä†ÊôÇÔºâ„ÇíÂá¶ÁêÜ
@handler.add(FollowEvent)
def handle_follow(event):
    user_id = event.source.user_id
    line_bot_api.push_message(
        user_id,
        TextSendMessage(text=f"„ÅÇ„Å™„Åü„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅØ:\n{user_id}")
    )

# ÈÄöÂ∏∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ÂøúÁ≠î
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    import re
    import datetime
    from spreadsheet_utils import record_study_log, update_notification_time

    user_id = event.source.user_id
    text = event.message.text.strip()

    # ‚úÖ ÈÄöÁü•Â§âÊõ¥„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Å©„ÅÜ„ÅãÂà§ÂÆö
    if is_notification_message(text):
        time_period, new_time = parse_message(text)
        if time_period and new_time:
            reply = update_notification_time(user_id, time_period, new_time)
        else:
            reply = "‚ö†Ô∏è ÈÄöÁü•ÊôÇÈñì„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„ÇìÔºà‰æãÔºö„ÄåÊúù7ÊôÇ30ÂàÜ„Å´ÈÄöÁü•„Åó„Å¶„ÄçÔºâ"

    # ‚úÖ Â≠¶ÁøíË®òÈå≤„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Å©„ÅÜ„ÅãÂà§ÂÆö
    elif is_study_log_message(text):
        time_match = re.search(r'(\d+)\s*ÂàÜ|(\d+)\s*ÊôÇÈñì', text)
        if time_match:
            if time_match.group(1):
                minutes = int(time_match.group(1))
            elif time_match.group(2):
                minutes = int(time_match.group(2)) * 60
        else:
            reply = "‚ö†Ô∏è Â≠¶ÁøíÊôÇÈñì„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºà‰æãÔºö30ÂàÜ„ÄÅ1ÊôÇÈñì„Å™„Å©Ôºâ"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
            return

        # subject „ÅÆÊäΩÂá∫Ôºà„Çø„Ç∞ÂÑ™ÂÖà„ÄÅ„Å™„Åë„Çå„Å∞ÊñáÈ†≠Ôºâ
        tags = re.findall(r'#(\w+)', text)
        if not tags:
            subject_match = re.match(r'^([\w„ÅÅ-„Çì„Ç°-„É≥‰∏Ä-Èæ•]+)', text)
            subject = subject_match.group(1) if subject_match else "‰∏çÊòé"
        else:
            subject = '„Éª'.join(tags)

        try:
            record_study_log({
                'datetime': datetime.datetime.now().isoformat(),
                'user_id': user_id,
                'subject': subject,
                'minutes': minutes,
                'raw_message': text
            })
            reply = f"‚úÖ {subject}„Çí{minutes}ÂàÜ Ë®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ"
        except Exception as e:
            reply = f"‚ùå „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË®òÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„ÅüÔºö{e}"

    # ‚ùå „Å©„Å°„Çâ„Åß„ÇÇ„Å™„ÅÑÂ†¥Âêà„ÅØÊ≥®ÊÑèÂñöËµ∑
    else:
        reply = (
            "‚ö†Ô∏è ÂÖ•ÂäõÂΩ¢Âºè„ÅåÂà§Âà•„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n\n"
            "üìå ÈÄöÁü•Â§âÊõ¥ ‚Üí ‰æãÔºö„ÄåÊúù7ÊôÇ30ÂàÜ„Å´ÈÄöÁü•„Åó„Å¶„Äç\n"
            "üìå Â≠¶ÁøíË®òÈå≤ ‚Üí ‰æãÔºö„ÄåËã±Ë™û30ÂàÜ„Äç„Äå#Âæ©Áøí 1ÊôÇÈñì„Äç"
        )

    # üí¨ ÂÖ±ÈÄö„ÅÆËøî‰ø°Âá¶ÁêÜ
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
